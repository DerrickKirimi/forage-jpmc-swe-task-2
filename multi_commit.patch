From c0d366c217842fb77a60a34fed258b075620bb7b Mon Sep 17 00:00:00 2001
From: DerrickKirimi <remmydren@gmail.com>
Date: Wed, 8 Nov 2023 21:42:53 +0300
Subject: [PATCH 1/3] add venv to gitignore

---
 .gitignore | 1 +
 1 file changed, 1 insertion(+)

diff --git a/.gitignore b/.gitignore
index 4d29575..5bf6bb2 100755
--- a/.gitignore
+++ b/.gitignore
@@ -21,3 +21,4 @@
 npm-debug.log*
 yarn-debug.log*
 yarn-error.log*
+venv
-- 
2.42.0


From c6c70bb4ff4eaecfb2e9036e94a301ba5a0204c1 Mon Sep 17 00:00:00 2001
From: DerrickKirimi <remmydren@gmail.com>
Date: Sat, 11 Nov 2023 10:36:12 +0300
Subject: [PATCH 2/3] Modified app.tsx

---
 src/App.tsx | 22 ++++++++++++++++++----
 1 file changed, 18 insertions(+), 4 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..7e56b3c 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if (this.state.showGraph){
     return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    let x = 0;
+    const interval = setInterval( () => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
-  }
+        this.setState({ 
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+  }, 100);
+}
 
   /**
    * Render the App react component
-- 
2.42.0


From 1d9360081003378926913fdc71cc77c4f604c49d Mon Sep 17 00:00:00 2001
From: DerrickKirimi <remmydren@gmail.com>
Date: Sat, 11 Nov 2023 11:02:53 +0300
Subject: [PATCH 3/3] Modified graph.tsx to show graph with aggregated
 duplicates

---
 src/Graph.tsx | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..ab94026 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row_pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates',
+      `{"stock": "distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price":"avg",
+      "timestamp":"distinct count"}`);
     }
   }
 
-- 
2.42.0

